// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Module.Core.Data;

namespace Shop.WebApi.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    partial class ShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Core_RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Core_UserToken");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Catalog_Brand");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInMenu");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<int?>("MediaId");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("ParentId");

                    b.ToTable("Catalog_Category");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AdditionalShippingCharge");

                    b.Property<string>("AdminRemark");

                    b.Property<string>("Barcode");

                    b.Property<int?>("BrandId");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("DeliveryTime");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("DisplayStockAvailability");

                    b.Property<bool>("DisplayStockQuantity");

                    b.Property<int?>("FreightTemplateId");

                    b.Property<string>("Gtin")
                        .HasMaxLength(450);

                    b.Property<bool>("HasOptions");

                    b.Property<decimal>("Height");

                    b.Property<bool>("IsAllowToOrder");

                    b.Property<bool>("IsCallForPricing");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsFreeShipping");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsShipEnabled");

                    b.Property<bool>("IsVisibleIndividually");

                    b.Property<decimal>("Length");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(450);

                    b.Property<bool>("NotReturnable");

                    b.Property<decimal?>("OldPrice");

                    b.Property<int>("OrderMaximumQuantity");

                    b.Property<int>("OrderMinimumQuantity");

                    b.Property<int?>("ParentGroupedProductId");

                    b.Property<decimal>("Price");

                    b.Property<int>("PublishType");

                    b.Property<DateTime?>("PublishedOn");

                    b.Property<double?>("RatingAverage");

                    b.Property<int>("ReviewsCount");

                    b.Property<string>("ShortDescription");

                    b.Property<string>("Sku")
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<decimal?>("SpecialPrice");

                    b.Property<DateTime?>("SpecialPriceEnd");

                    b.Property<DateTime?>("SpecialPriceStart");

                    b.Property<string>("Specification");

                    b.Property<int>("StockReduceStrategy");

                    b.Property<bool>("StockTrackingIsEnabled");

                    b.Property<int?>("ThumbnailImageId");

                    b.Property<int?>("UnitId");

                    b.Property<DateTime?>("UnpublishedOn");

                    b.Property<string>("UnpublishedReason");

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int?>("ValidThru");

                    b.Property<decimal>("Weight");

                    b.Property<decimal>("Width");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FreightTemplateId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsPublished");

                    b.HasIndex("Name");

                    b.HasIndex("ParentGroupedProductId");

                    b.HasIndex("Sku");

                    b.HasIndex("Slug");

                    b.HasIndex("ThumbnailImageId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Catalog_Product");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Catalog_ProductAttribute");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttributeId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("Catalog_ProductAttributeData");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Catalog_ProductAttributeGroup");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Catalog_ProductAttributeTemplate");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeTemplateRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttributeId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("TemplateId");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Catalog_ProductAttributeTemplateRelation");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttributeId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductAttributeValue");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductCategory");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LinkType");

                    b.Property<int>("LinkedProductId");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("LinkedProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductLink");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MediaId");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductMedia");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DisplayType");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Catalog_ProductOption");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DisplayType = 1,
                            IsDeleted = false,
                            Name = "Color",
                            UpdatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DisplayType = 0,
                            IsDeleted = false,
                            Name = "Size",
                            UpdatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductOptionCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OptionId");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductOptionCombination");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductOptionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Display")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<int>("OptionId");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("Catalog_ProductOptionData");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductOptionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Display")
                        .HasMaxLength(450);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("MediaId");

                    b.Property<int>("OptionId");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductOptionValue");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal?>("OldPrice");

                    b.Property<decimal?>("Price");

                    b.Property<int?>("ProductId");

                    b.Property<decimal?>("SpecialPrice");

                    b.Property<DateTime?>("SpecialPriceEnd");

                    b.Property<DateTime?>("SpecialPriceStart");

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Catalog_ProductPriceHistory");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductRecentlyViewed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestViewedOn");

                    b.Property<int>("ProductId");

                    b.Property<int>("ViewedCount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductRecentlyViewed");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductWishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Description")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductWishlist");
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Catalog_Unit");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("City");

                    b.Property<string>("Company");

                    b.Property<string>("ContactName");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Phone");

                    b.Property<int>("StateOrProvinceId");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("Core_Address");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.AppSetting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FormatType");

                    b.Property<bool>("IsVisibleInCommonSettingPage");

                    b.Property<string>("Module")
                        .HasMaxLength(450);

                    b.Property<string>("Note")
                        .HasMaxLength(450);

                    b.Property<string>("Type")
                        .HasMaxLength(450);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Core_AppSetting");

                    b.HasData(
                        new
                        {
                            Id = "Global.AssetVersion",
                            FormatType = 0,
                            IsVisibleInCommonSettingPage = false,
                            Module = "Core",
                            Value = "1.0"
                        },
                        new
                        {
                            Id = "ApiHost",
                            FormatType = 0,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Core",
                            Value = "https://demo.shopapi.circle.ac.cn/"
                        },
                        new
                        {
                            Id = "WebHost",
                            FormatType = 0,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Core",
                            Value = "https://demo.shop.circle.ac.cn/"
                        },
                        new
                        {
                            Id = "ShopConfig",
                            FormatType = 1,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Core",
                            Type = "Shop.Infrastructure.ShopConfig, Shop.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            Value = "{\"ShopName\":\"天网商城\",\"CacheTimeInMinutes\":60,\"RedisCachingEnabled\":true,\"RedisCachingConnection\":\"demo-shop-redis:6379,ssl=False,password=qGmNTfPtbQYMX6Qz,allowadmin=true\"}"
                        },
                        new
                        {
                            Id = "EmailSenderSmtpOptions",
                            FormatType = 1,
                            IsVisibleInCommonSettingPage = true,
                            Module = "EmailSenderSmtp",
                            Type = "Shop.Module.EmailSenderSmtp.EmailSenderSmtpOptions, Shop.Module.EmailSenderSmtp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            Value = "{\"SmtpUserName\":\"system@trueai.org\",\"SmtpPassword\":\"******\",\"SmtpHost\":\"smtp.mxhichina.com\",\"SmtpPort\":587}"
                        },
                        new
                        {
                            Id = "SmsSenderAliyunOptions",
                            FormatType = 1,
                            IsVisibleInCommonSettingPage = true,
                            Module = "SmsSenderAliyun",
                            Type = "Shop.Module.SmsSenderAliyun.Models.SmsSenderAliyunOptions, Shop.Module.SmsSenderAliyun, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            Value = "{\"RegionId\":\"default\",\"AccessKeyId\":\"LTAI8v8Crr******\",\"AccessKeySecret\":\"BVZY9tPKjNsuAg2njEgZa1KI******\",\"IsTest\":true}"
                        },
                        new
                        {
                            Id = "Catalog.ProductPageSize",
                            FormatType = 0,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Catalog",
                            Value = "10"
                        },
                        new
                        {
                            Id = "OrderAutoCanceledTimeForMinute",
                            FormatType = 0,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Orders",
                            Note = "订单下单后超时自动取消订单时间（单位：分钟）",
                            Type = "System.Int32",
                            Value = "120"
                        },
                        new
                        {
                            Id = "OrderAutoCompleteTimeForMinute",
                            FormatType = 0,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Orders",
                            Note = "订单支付后超时自动完成订单时间（买家未在指定的时间内确认收货,则系统自动确认收货完成订单，单位：分钟）",
                            Type = "System.Int32",
                            Value = "10080"
                        },
                        new
                        {
                            Id = "OrderCompleteAutoReviewTimeForMinute",
                            FormatType = 0,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Orders",
                            Note = "订单完成后超时自动好评时间（买家未在指定的时间内评价,则系统自动好评，单位：分钟）",
                            Type = "System.Int32",
                            Value = "10080"
                        },
                        new
                        {
                            Id = "HangfireOptions",
                            FormatType = 1,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Hangfire",
                            Type = "Shop.Module.Hangfire.Models.HangfireOptions, Shop.Module.Hangfire, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            Value = "{\"Provider\":3,\"MySqlHangfireConnection\":\"server=172.16.250.6;PORT=3306;database=demo_shop_hangfire;uid=root;pwd=czYj9hnFaVUfZgm7;Connection Timeout=60;Allow Zero Datetime=True;Allow User Variables=True;pooling=true;min pool size=5;max pool size=512;SslMode=None;\",\"SqlServerHangfireConnection\":\"Data Source=127.0.0.1;Initial Catalog=ShopHangfire;User ID=sa;Password=******\",\"RedisHangfireConnection\":\"127.0.0.1:16379,password=******,allowadmin=true\",\"Username\":\"admin\",\"Password\":\"123456\"}"
                        },
                        new
                        {
                            Id = "MiniProgramOptions",
                            FormatType = 1,
                            IsVisibleInCommonSettingPage = true,
                            Module = "MiniProgram",
                            Type = "Shop.Module.Core.MiniProgram.Models.MiniProgramOptions, Shop.Module.Core.MiniProgram, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            Value = "{\"AppId\":\"wxc90c1e6038******\",\"AppSecret\":\"736192139a4ca393de4a18ce22******\",\"MchId\":\"1526******\",\"Key\":\"jtA9J79YNUXnTRpVntHqTGSF2h******\"}"
                        },
                        new
                        {
                            Id = "IsReviewAutoApproved",
                            FormatType = 0,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Reviews",
                            Type = "System.Boolean",
                            Value = "false"
                        },
                        new
                        {
                            Id = "IsReplyAutoApproved",
                            FormatType = 0,
                            IsVisibleInCommonSettingPage = true,
                            Module = "Reviews",
                            Type = "System.Boolean",
                            Value = "true"
                        });
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsBillingEnabled");

                    b.Property<bool>("IsCityEnabled");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDistrictEnabled");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsShippingEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("NumericIsoCode");

                    b.Property<string>("ThreeLetterIsoCode")
                        .IsRequired();

                    b.Property<string>("TwoLetterIsoCode")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Core_Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DisplayOrder = 0,
                            IsBillingEnabled = true,
                            IsCityEnabled = true,
                            IsDeleted = false,
                            IsDistrictEnabled = false,
                            IsPublished = false,
                            IsShippingEnabled = true,
                            Name = "China",
                            NumericIsoCode = 156,
                            ThreeLetterIsoCode = "CHN",
                            TwoLetterIsoCode = "CN",
                            UpdatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DisplayOrder = 0,
                            IsBillingEnabled = false,
                            IsCityEnabled = true,
                            IsDeleted = false,
                            IsDistrictEnabled = true,
                            IsPublished = false,
                            IsShippingEnabled = false,
                            Name = "United States",
                            NumericIsoCode = 840,
                            ThreeLetterIsoCode = "USA",
                            TwoLetterIsoCode = "US",
                            UpdatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.EmailSend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bcc");

                    b.Property<string>("Body");

                    b.Property<string>("Cc");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("From")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHtml");

                    b.Property<bool>("IsSucceed");

                    b.Property<string>("Message");

                    b.Property<string>("OutId")
                        .HasMaxLength(450);

                    b.Property<string>("ReceiptId")
                        .HasMaxLength(450);

                    b.Property<string>("Subject");

                    b.Property<string>("To");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Core_EmailSend");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("EntityId");

                    b.Property<int>("EntityTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Core_Entity");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsMenuable");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_EntityType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMenuable = true,
                            Module = "Catalog",
                            Name = "Category"
                        },
                        new
                        {
                            Id = 2,
                            IsMenuable = true,
                            Module = "Catalog",
                            Name = "Brand"
                        },
                        new
                        {
                            Id = 3,
                            IsMenuable = false,
                            Module = "Catalog",
                            Name = "Product"
                        },
                        new
                        {
                            Id = 10,
                            IsMenuable = false,
                            Module = "Reviews",
                            Name = "Review"
                        },
                        new
                        {
                            Id = 11,
                            IsMenuable = false,
                            Module = "Reviews",
                            Name = "Reply"
                        });
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("FileSize");

                    b.Property<string>("Hash")
                        .HasMaxLength(450);

                    b.Property<string>("Host")
                        .HasMaxLength(450);

                    b.Property<string>("Md5")
                        .HasMaxLength(32);

                    b.Property<int>("MediaType");

                    b.Property<string>("Path");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Core_Media");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Core_Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4776a1b2-dbe4-4056-82ec-8bed211d1454",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "00d172be-03a0-4856-8b12-26d63fcf4374",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "d4754388-8355-4018-b728-218018836817",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.SmsSend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSucceed");

                    b.Property<bool>("IsTest");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Message");

                    b.Property<string>("OutId")
                        .HasMaxLength(450);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ReceiptId")
                        .HasMaxLength(450);

                    b.Property<string>("SignName")
                        .HasMaxLength(450);

                    b.Property<string>("TemplateCode")
                        .HasMaxLength(450);

                    b.Property<string>("TemplateParam");

                    b.Property<int?>("TemplateType");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("IsSucceed");

                    b.HasIndex("IsUsed");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("Core_SmsSend");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.StateOrProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(450);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<int>("Level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int?>("ParentId");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ParentId");

                    b.ToTable("Core_StateOrProvince");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AdminRemark")
                        .HasMaxLength(450);

                    b.Property<int?>("AvatarId");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(450);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Culture");

                    b.Property<int?>("DefaultBillingAddressId");

                    b.Property<int?>("DefaultShippingAddressId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastActivityOn");

                    b.Property<string>("LastIpAddress")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("LastLoginOn");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RefreshTokenHash");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<Guid>("UserGuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("DefaultBillingAddressId");

                    b.HasIndex("DefaultShippingAddressId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Core_User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "101cd6ae-a8ef-4a37-97fd-04ac2dd630e4",
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "system@trueai.org",
                            EmailConfirmed = false,
                            FullName = "System User",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "SYSTEM@TRUEAI.ORG",
                            NormalizedUserName = "SYSTEM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH9OxxtYF2U/mdHwU0b18pjw1UfBbIFY5wrkLS092drNBcKFM99LmxcBUAv3+CTjNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "B3IACJI4YP56GU7Y2Y3TJ63ISYLCQM6W",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            UserGuid = new Guid("5f72f83b-7436-4221-869c-1b69b2e23aae"),
                            UserName = "system"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c83afcbc-312c-4589-bad7-8686bd4754c0",
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@trueai.org",
                            EmailConfirmed = false,
                            FullName = "Shop Admin",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@TRUEAI.ORG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECWSPYhRBTHbETKsda3xnUUxDaH++2r3TmeHcn/agfSEOMmQFGhRdyKGlg3qJL+1HA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6847450-47f0-4c7a-9fed-0c66234bf61f",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            UserGuid = new Guid("ed8210c3-24b0-4823-a744-80078cf12eb4"),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<int>("AddressType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastUsedOn");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserAddress");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UnionId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserLogin");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Core_UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateUrl");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EditUrl");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ViewComponentName");

                    b.HasKey("Id");

                    b.ToTable("Core_Widget");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateUrl = "widget-category-create",
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUrl = "widget-category-edit",
                            IsPublished = true,
                            Name = "Category Widget",
                            ViewComponentName = "CategoryWidget"
                        },
                        new
                        {
                            Id = 2,
                            CreateUrl = "widget-product-create",
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUrl = "widget-product-edit",
                            IsPublished = true,
                            Name = "Product Widget",
                            ViewComponentName = "ProductWidget"
                        },
                        new
                        {
                            Id = 3,
                            CreateUrl = "widget-simple-product-create",
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUrl = "widget-simple-product-edit",
                            IsPublished = true,
                            Name = "Simple Product Widget",
                            ViewComponentName = "SimpleProductWidget"
                        },
                        new
                        {
                            Id = 4,
                            CreateUrl = "widget-html-create",
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUrl = "widget-html-edit",
                            IsPublished = true,
                            Name = "Html Widget",
                            ViewComponentName = "HtmlWidget"
                        },
                        new
                        {
                            Id = 5,
                            CreateUrl = "widget-carousel-create",
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUrl = "widget-carousel-edit",
                            IsPublished = true,
                            Name = "Carousel Widget",
                            ViewComponentName = "CarouselWidget"
                        },
                        new
                        {
                            Id = 7,
                            CreateUrl = "widget-recently-viewed-create",
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            EditUrl = "widget-recently-viewed-edit",
                            IsPublished = true,
                            Name = "Recently Viewed Widget",
                            ViewComponentName = "RecentlyViewedWidget"
                        });
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.WidgetInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Data");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("HtmlData");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("PublishEnd");

                    b.Property<DateTime?>("PublishStart");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("WidgetId");

                    b.Property<int>("WidgetZoneId");

                    b.HasKey("Id");

                    b.HasIndex("WidgetId");

                    b.HasIndex("WidgetZoneId");

                    b.ToTable("Core_WidgetInstance");
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.WidgetZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_WidgetZone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Home Featured"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Home Main Content"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Home After Main Content"
                        });
                });

            modelBuilder.Entity("Shop.Module.Feedbacks.Abstractions.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contact");

                    b.Property<string>("Content")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .HasMaxLength(450);

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks_Feedback");
                });

            modelBuilder.Entity("Shop.Module.Inventory.Abstractions.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<int>("LockedStockQuantity");

                    b.Property<string>("Note")
                        .HasMaxLength(450);

                    b.Property<int>("ProductId");

                    b.Property<int>("StockQuantity");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory_Stock");
                });

            modelBuilder.Entity("Shop.Module.Inventory.Abstractions.Entities.StockHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdjustedQuantity");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Note");

                    b.Property<int>("ProductId");

                    b.Property<int>("StockQuantity");

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory_StockHistory");
                });

            modelBuilder.Entity("Shop.Module.Inventory.Abstractions.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<string>("AdminRemark");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Inventory_Warehouse");
                });

            modelBuilder.Entity("Shop.Module.Orders.Abstractions.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminNote")
                        .HasMaxLength(450);

                    b.Property<int?>("BillingAddressId");

                    b.Property<DateTime?>("CancelOn");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(450);

                    b.Property<string>("CouponCode");

                    b.Property<string>("CouponRuleName");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("DeliveredEndOn");

                    b.Property<DateTime?>("DeliveredOn");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("No");

                    b.Property<string>("OnHoldReason")
                        .HasMaxLength(450);

                    b.Property<string>("OrderNote")
                        .HasMaxLength(450);

                    b.Property<int>("OrderStatus");

                    b.Property<decimal>("OrderTotal");

                    b.Property<DateTime?>("PaymentEndOn");

                    b.Property<decimal>("PaymentFeeAmount");

                    b.Property<int?>("PaymentMethod");

                    b.Property<DateTime?>("PaymentOn");

                    b.Property<int>("PaymentType");

                    b.Property<decimal>("RefundAmount");

                    b.Property<DateTime?>("RefundOn");

                    b.Property<string>("RefundReason");

                    b.Property<int?>("RefundStatus");

                    b.Property<DateTime?>("ShippedOn");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<decimal>("ShippingFeeAmount");

                    b.Property<int>("ShippingMethod");

                    b.Property<int?>("ShippingStatus");

                    b.Property<decimal>("SubTotal");

                    b.Property<decimal>("SubTotalWithDiscount");

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("No")
                        .IsUnique();

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Orders_Order");
                });

            modelBuilder.Entity("Shop.Module.Orders.Abstractions.Entities.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NewStatus");

                    b.Property<string>("Note");

                    b.Property<int?>("OldStatus");

                    b.Property<int>("OrderId");

                    b.Property<string>("OrderSnapshot");

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Orders_OrderHistory");
                });

            modelBuilder.Entity("Shop.Module.Orders.Abstractions.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("ItemAmount");

                    b.Property<decimal>("ItemWeight");

                    b.Property<string>("Note");

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductMediaUrl");

                    b.Property<string>("ProductName");

                    b.Property<decimal>("ProductPrice");

                    b.Property<int>("Quantity");

                    b.Property<int>("ShippedQuantity");

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Orders_OrderItem");
                });

            modelBuilder.Entity("Shop.Module.Orders.Abstractions.Events.OrderAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<int>("AddressType");

                    b.Property<string>("City");

                    b.Property<string>("Company");

                    b.Property<string>("ContactName");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrderId");

                    b.Property<string>("Phone");

                    b.Property<int>("StateOrProvinceId");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("Orders_OrderAddress");
                });

            modelBuilder.Entity("Shop.Module.Reviews.Abstractions.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("EntityId");

                    b.Property<int>("EntityTypeId");

                    b.Property<bool>("IsAnonymous");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<int>("Rating");

                    b.Property<string>("ReviewerName")
                        .HasMaxLength(450);

                    b.Property<int?>("SourceId");

                    b.Property<int?>("SourceType");

                    b.Property<int>("Status");

                    b.Property<int>("SupportCount");

                    b.Property<string>("Title")
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews_Review");
                });

            modelBuilder.Entity("Shop.Module.Reviews.Abstractions.Entities.ReviewMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MediaId");

                    b.Property<int>("ReviewId");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Reviews_ReviewMedia");
                });

            modelBuilder.Entity("Shop.Module.Reviews.Abstractions.Entities.Support", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("EntityId");

                    b.Property<int>("EntityTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ReviewId");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews_Support");
                });

            modelBuilder.Entity("Shop.Module.Reviews.Abstractions.Services.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsAnonymous");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ParentId");

                    b.Property<string>("ReplierName")
                        .HasMaxLength(450);

                    b.Property<int>("ReviewId");

                    b.Property<int>("Status");

                    b.Property<int>("SupportCount");

                    b.Property<int?>("ToUserId");

                    b.Property<string>("ToUserName")
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews_Reply");
                });

            modelBuilder.Entity("Shop.Module.Shipments.Abstractions.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminComment");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeliveredOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrderId");

                    b.Property<DateTime?>("ShippedOn");

                    b.Property<decimal>("TotalWeight");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(450);

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderId");

                    b.HasIndex("TrackingNumber");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Shipments_Shipment");
                });

            modelBuilder.Entity("Shop.Module.Shipments.Abstractions.Entities.ShipmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrderItemId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("ShipmentId");

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Shipments_ShipmentItem");
                });

            modelBuilder.Entity("Shop.Module.Shipping.Abstractions.Entities.FreightTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(450);

                    b.Property<string>("Note");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Shipping_FreightTemplate");
                });

            modelBuilder.Entity("Shop.Module.Shipping.Abstractions.Entities.PriceAndDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FreightTemplateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<decimal>("MinOrderSubtotal");

                    b.Property<string>("Note");

                    b.Property<decimal>("ShippingPrice");

                    b.Property<int?>("StateOrProvinceId");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FreightTemplateId");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("Shipping_PriceAndDestination");
                });

            modelBuilder.Entity("Shop.Module.ShoppingCart.Abstractions.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CouponCode");

                    b.Property<string>("CouponRuleName");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsProductPriceIncludeTax");

                    b.Property<string>("OrderNote");

                    b.Property<decimal?>("ShippingAmount");

                    b.Property<string>("ShippingData");

                    b.Property<string>("ShippingMethod");

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ShoppingCart_Cart");
                });

            modelBuilder.Entity("Shop.Module.ShoppingCart.Abstractions.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CartId");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsChecked");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ShoppingCart_CartItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.Category", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.Product", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Shipping.Abstractions.Entities.FreightTemplate", "FreightTemplate")
                        .WithMany()
                        .HasForeignKey("FreightTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "ParentProduct")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentGroupedProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Media", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttribute", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeGroup", "Group")
                        .WithMany("Attributes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeData", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.ProductAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeTemplateRelation", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.ProductAttribute", "Attribute")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeTemplate", "Template")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("FK_Catalog_ProductAttributeTemplateRelation_Catalog_ProductAtt~1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.ProductAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductCategory", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductLink", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "LinkedProduct")
                        .WithMany()
                        .HasForeignKey("LinkedProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductMedia", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany("Medias")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductOptionCombination", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany("OptionCombinations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductOptionData", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductOptionValue", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany("OptionValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductPriceHistory", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany("PriceHistories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductRecentlyViewed", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Catalog.Abstractions.Entities.ProductWishlist", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.Address", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.Entity", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.StateOrProvince", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Country", "Country")
                        .WithMany("StatesOrProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.StateOrProvince", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.User", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Media", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.UserAddress", "DefaultBillingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultBillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.UserAddress", "DefaultShippingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.UserAddress", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.UserLogin", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.UserRole", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Core.Abstractions.Entities.WidgetInstance", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.WidgetZone", "WidgetZone")
                        .WithMany()
                        .HasForeignKey("WidgetZoneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Feedbacks.Abstractions.Entities.Feedback", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Inventory.Abstractions.Entities.Stock", b =>
                {
                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Inventory.Abstractions.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Inventory.Abstractions.Entities.StockHistory", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Inventory.Abstractions.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Inventory.Abstractions.Entities.Warehouse", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Orders.Abstractions.Entities.Order", b =>
                {
                    b.HasOne("Shop.Module.Orders.Abstractions.Events.OrderAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Orders.Abstractions.Events.OrderAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Orders.Abstractions.Entities.OrderHistory", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Orders.Abstractions.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Orders.Abstractions.Entities.OrderItem", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Orders.Abstractions.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Orders.Abstractions.Events.OrderAddress", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Orders.Abstractions.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Reviews.Abstractions.Entities.Review", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Reviews.Abstractions.Entities.ReviewMedia", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Reviews.Abstractions.Entities.Review", "Review")
                        .WithMany("Medias")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Reviews.Abstractions.Entities.Support", b =>
                {
                    b.HasOne("Shop.Module.Reviews.Abstractions.Entities.Review")
                        .WithMany("Supports")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Reviews.Abstractions.Services.Reply", b =>
                {
                    b.HasOne("Shop.Module.Reviews.Abstractions.Services.Reply", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Reviews.Abstractions.Entities.Review", "Review")
                        .WithMany("Replies")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Shipments.Abstractions.Entities.Shipment", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Orders.Abstractions.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Shipments.Abstractions.Entities.ShipmentItem", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Orders.Abstractions.Entities.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Shipments.Abstractions.Entities.Shipment", "Shipment")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.Shipping.Abstractions.Entities.PriceAndDestination", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Shipping.Abstractions.Entities.FreightTemplate", "FreightTemplate")
                        .WithMany("PriceAndDestinations")
                        .HasForeignKey("FreightTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.ShoppingCart.Abstractions.Entities.Cart", b =>
                {
                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shop.Module.ShoppingCart.Abstractions.Entities.CartItem", b =>
                {
                    b.HasOne("Shop.Module.ShoppingCart.Abstractions.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Catalog.Abstractions.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shop.Module.Core.Abstractions.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
